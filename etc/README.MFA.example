This README give some instruction to make Multi-Factor Authentication with SSH

On the net you can read only with google-authenticator etc. but with this
modified modul we can do more flexible things.

The configuration:

[Client] <==ssh==> [Server] <---> [PAM/pam_script] <---> [custom script]

In this example we use:
 - a public key auth
 - next a password auth
 - and a one time password auth (OTP)

We use a second ssh daemon for this on TCP port 22022, so we need a second service:
In /usr/local/lib/systemd/system we create a unit file: ssh-mfa.service (copy from
the "original" ssh unit file)
---------------
[Unit]
Description=OpenBSD Secure Shell server MFA
#PAM /etc/pam.d/sshd-mfa
Documentation=man:sshd(8) man:sshd_config(5)
After=network.target auditd.service
ConditionPathExists=!/srv/sshd-mfa/sshd-mfa_not_to_be_run

[Service]
EnvironmentFile=-/etc/default/ssh-mfa
ExecStartPre=/usr/local/sbin/sshd-mfa -t
ExecStart=/usr/local/sbin/sshd-mfa -f /srv//sshd-mfa/sshd/sshd_config -D $SSHD_MFA_OPTS
ExecReload=/usr/local/sbin/sshd-mfa -t
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
RestartPreventExitStatus=255
Type=notify
RuntimeDirectory=sshd
RuntimeDirectoryMode=0755

[Install]
WantedBy=multi-user.target
Alias=sshd-mfa.service
-------------

The config file for this sshd instance is /etc/ssh/sshd-mfa_config

The important parts:
-------------
Port 22022
...
PubkeyAuthentication yes
...
AuthorizedKeysFile    /srv/sshd-mfa/users/%u/authorized_keys
...
PasswordAuthentication no
...
ChallengeResponseAuthentication yes
...
UsePAM yes
...
PidFile /var/run/sshd-mfa.pid
...
AuthenticationMethods publickey,keyboard-interactive
ForceCommand /srv/sshd-mfa/scripts/usermenu
Include /srv/sshd-mfa/sshd/users/*
-------------

So:
  - Port is port :)
  - PubkeyAuthentication for pubkey auth (1st factor)
  - AuthorizedKeyFile: we store the pubkeys in /srv/sshd-mfa/users/{user}/ dir
    the file name is authorized_keys
  - PasswordAuthentication no - some ssh magic
  - ChallengeResponseAuthentication yes - this is needed for PAM
  - UsePam yes - of course
  - a separated pid file from the "original" sshd service
  - AuthenticationMethods - this made first pubkey and next call PAM
  - ForceCommand - a script (user cannot get console, only a "dialog" form in order to
       change their password/e-mail address
  - Include - include all user config file (beginning with Match User {user})

We need a separate executable for this sshd (/usr/local/sbin/sshd-mfa) because PAM
use executable name to filter rules. We symlink the original sshd:
  ln -s /sbin/sshd /usr/local/sbin/sshd-mfa

Now we add a custom PAM rules file /etc/pam.d/sshd-mfa
------------
auth       [success=1 default=ignore]  pam_script.so reqpass            askpass=none  dir=/srv/sshd-mfa/scripts
auth       required                    pam_script.so passwd [prompt=PASS: ]           dir=/srv/sshd-mfa/scripts

auth       [success=2 default=ignore]  pam_script.so reqotp             askpass=none  dir=/srv/sshd-mfa/scripts
auth       required                    pam_script.so sendotp            askpass=none  dir=/srv/sshd-mfa/scripts
auth       required                    pam_script.so OTP [prompt=OTP: ] askpass=force dir=/srv/sshd-mfa/scripts

auth       required                    pam_permit.so
-----------

So:
  first auth line - our script checks that: our user needs to authenticate by password. If not PAM skip the next
                    auth line (success=1). pam_script.so does not ask password (askpass=none)
  second auth line - our script ask a password with prompt is "PASS: " (pam_script.so ask password as usual)
  next auth line - our script checks that: our user needs to authenticate with OTP. If not PAM skip the next two
                    auth line (success=2). pam_script.so does not ask password (askpass=none)
  next auth line - our script generate and send an OTP: pam_script.so does not ask password (askpass=none)
  next auth line - our script ask a password with prompt is "OTP: ". pam_script.so forced to ask a password
                    (askpass=force))
  next auth line - just permit login if our user does not need to auth with password nor OTP

pam_script.so for all line run our bash script: /srv/sshd-mfa/scripts/pam_script_auth with all arguments, so
$1 is becomes reqpass, passwd, reqotp, sendotp and OTP in turn

The script:
------------
#!/bin/bash

xDIR=/srv/sshd-mfa
DIR=$xDIR/users/${PAM_USER:-nobody}

test -z "$PAM_USER" && exit 6

no_pass_required=
no_otp_required=
test -r $DIR/authenv && source $DIR/authenv

if test "$1" = "reqpass"
then
  test "$no_pass_required" = yes_no_pass_required && exit 0
  exit 25
elif test "$1" = "reqotp"
then
  test "$no_otp_required" = yes_no_otp_required && exit 0
  exit 25
elif test "$1" = "passwd"
then
#check pass
  if test "$(echo "$PAM_AUTHTOK" | sha384sum)" = "$(< $DIR/passwd)"
  then
      exit 0
  fi
  exit 7
elif test "$1" = "sendotp"
then
#generate OTP
  OTP=$(head -c 3 /dev/urandom | xxd  -g0 -c6 -ps | tee $DIR/otpass) && \
  echo "To: $(< $DIR/email)
Subject: OTP for $PAM_USER

$OTP
" |sendmail -f noreplay@email.addr.ess -t
  exit 0
elif test "$1" = "OTP"
then
  test -r $DIR/otpass && ! grep -q x $DIR/otpass && test "$PAM_AUTHTOK" = "$(< $DIR/otpass)"
  ec=$?
  rm $DIR/otpass
  exit $((ec*7))
fi

exit 7
--------------

Oh, one more!

We need a user in the system (cannot use ssh with virtual users):
 > useradd -K UID_MIN=20000 -g 20000 -M -d /tmp -s /bin/bash -c "My user,,,," {user}
this line adds a new user {user}, uid is minimum 20000 into group 20000, does not create
home dir (/tmp) shell is bash...

