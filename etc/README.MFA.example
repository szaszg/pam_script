This README give some instruction to make Multi-Factor Authentication with SSH

On the net you can read only with google-authenticator etc. but with this
modified modul we can do more flexible things.

The configuration:

[Client] --ssh--> [Server] --> [PAM/pam_script] --> [custom script]
    +------ssh--> [      ] --> [PAM/pam_script]                |
    |                                v                         v
    |                      [custom script]-->Ok/Fail    e-mail or SMS
    |                                                          |
    +-  .  .  ~   ~   ~ .  . ~   ~   ~ .  .  ~   ~   ~ .  .   -+

In this example we use:
 - a public key auth
 - next a password auth
 - and a one time password auth

We use a second ssh daemon for this on TCP port 22022, so we need a second service:
In /usr/local/lib/systemd/system we create a unit file: ssh-mfa.service (copy from
the "original" ssh unit file)
---------------
[Unit]
Description=OpenBSD Secure Shell server MFA
#PAM /etc/pam.d/sshd-mfa
Documentation=man:sshd(8) man:sshd_config(5)
After=network.target auditd.service
ConditionPathExists=!/etc/ssh/sshd-mfa_not_to_be_run

[Service]
EnvironmentFile=-/etc/default/ssh-mfa
ExecStartPre=/usr/local/sbin/sshd-mfa -t
ExecStart=/usr/local/sbin/sshd-mfa -f /etc/ssh/sshd-mfa_config -D $SSHD_MFA_OPTS
ExecReload=/usr/local/sbin/sshd-mfa -t
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure
RestartPreventExitStatus=255
Type=notify
RuntimeDirectory=sshd
RuntimeDirectoryMode=0755

[Install]
WantedBy=multi-user.target
Alias=sshd-mfa.service
-------------

The config file for this sshd instance is /etc/ssh/sshd-mfa_config

The important parts:
-------------
Port 22022
...
PubkeyAuthentication yes
...
AuthorizedKeysFile    /srv/sshd-mfa/pubkeys/%u-authorized_keys
...
PasswordAuthentication no
...
ChallengeResponseAuthentication yes
...
UsePAM yes
...
PidFile /var/run/sshd-mfa.pid
...
AuthenticationMethods publickey,keyboard-interactive
ForceCommand /srv/sshd-mfa/scripts/usermenu
-------------

So:
  - port is port :)
  - pubkeyauth for pubkey
  - authorizedkeyfile: we store the pubkeys in /srv/sshd-mfa/pubkeys/ dir
    the file name is [username]-authorized_keys
  - passwordauth - some ssh magic
  - ChallengeResponseAuthentication yes - this is needed for PAM
  - usepam - of course
  - a separated pid file from the "original" sshd service
  - authmethods - this made first pubkey and password (and PAM ask again next)
  - forcecommand - a script (user cannot get console, only a "dialog" form in order to
    change password/e-mail address if want to...)

We need a separate executable for this sshd (/usr/local/sbin/sshd-mfa) because PAM
use executable name to filter rules. We symlink the original sshd:
  ln -s /sbin/sshd /usr/local/sbin/sshd-mfa

Now we add a custom PAM rules file /etc/pam.d/sshd-mfa
------------
auth       required     pam_script.so passwd [prompt=Pass: ]         dir=/srv/sshd-mfa/scripts
auth       required     pam_script.so OTP    [prompt=OTP: ]  askpass dir=/srv/sshd-mfa/scripts
-----------

So:
  - auth - is auth :)
  - required - if fail the step, PAM do all others, but auth failed
  - pam_script.so - :)
  - passwd - the script (/srv/sshd-mfa/scripts/pam_script_auth) get all argument, so $1=passwd
  - [prompt=Pass: ] - the new argument, now pam_script prompt Pass:_ instead of Password:_
  - dir=... - where to find the script
This is the first pass, pam_script ask a password (from ssh) and the script generate an OTP and
send to the user.

The next line similar but:
  - [prompt=... ] - now the user see: OTP:_
  - askpass - pam_script ask password even it is in the "cache" (yes it is in the cache, because
              the previouse step pam_script ask a password).
The script:
------------
#!/bin/bash
#
# $1 = passwd -> ask password and generate OTP return OK!
# $1 = OTP -> ask otp and return BAD if pass check or OTP check failes
#
xDIR=/srv/sshd-mfa
OFLE=$xDIR/otpass/${PAM_USER:-nobody}
PFLE=$xDIR/passwd/${PAM_USER:-nobody}
AFLE=$xDIR/addres/${PAM_USER:-nobody}

test -z "$PAM_USER" && exit 1

if test "$1" = "passwd"
then
  echo -n x >$OFLE #if password match fail...
#check pass
  if test "$(echo "$PAM_AUTHTOK" | sha384sum)" = "$(cat "$PFLE")"
  then
      echo -n >$OFLE
  fi
#generate OTP
  OTP=$(head -c 3 /dev/urandom | xxd  -g0 -c6 -ps | tee $OFLE)
  echo "To: $(< $AFLE)
Subject: OVSZ AUTH OTP for $PAM_USER

$OTP
" | sendmail -f ovszit@ovsz.hu -t
  exit 0
elif test "$1" = "OTP"
then
    if test -r $OFLE && ! grep -q x $OFLE && test "$PAM_AUTHTOK" = "$(< $OFLE)"
    then
        rm $OFLE
        exit 0
    else
        rm -f $OFLE
        exit 1
    fi
fi

exit 1
--------------

This is so easy (now) :)
